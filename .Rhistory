head(gs)
sd(gs)/sqrt(nn)
sd(gs)
library(UsingR)
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
nn = 100000
gcalc = function(){
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
lm(y~x)$coef
}
gcalc
gs = replicate(nn,gcalc())
plot(gs)
head(gs)
sd(gs)
plot(gs)
head(gs)
gs[0]
betahat
gcalc = function(){
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
lm(y~x)$coef[1]
}
gcalc()
gs[0:1]
gs[0:10]
head(gs,10)
head(gs,11)
head(gs,1)
gcalc = function(){
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
lm(y~x)$coef[1] # return slope only
}
gcalc()
gs = replicate(nn,gcalc())
gs[0:10]
plot(gs)
gs[0:10]
sd(gs)
betahat
gcalc = function(){
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
lm(y~x)$coef[2] # return slope only
}
gcalc()
gs = replicate(nn,gcalc())
gs[0:10]
plot(gs)
gs[0:10]
sd(gs)
cov(x,y)
library(UsingR)
data(package='UsingR')
sigma^2 (X^T X)^-1
x = father.son$fheight
y = father.son$sheight
n = length(y)
N = 50
set.seed(1)
index = sample(n,N)
sampledat = father.son[index,]
x = sampledat$fheight
y = sampledat$sheight
betahat = lm(y~x)$coef
fit = lm(y ~ x)
fit$fitted.values
yh = fit$fitted.values
residuals = y-yh
sum(residuals**2)
SSR = y-yh
sum(SSR**2)
sigma2 = SSR / 48
solve(t(X) %* X)
solve(t(X) *%* X)
X = cbind(rep(1,N), x)
solve(t(X) *%* X)
solve((t(X) *%* X))
t(X) *%* X
solve((t(X) %*% X))
xx = solve((t(X) %*% X))
sigma2 = SSR / 48
xx * sigma2
t(X) *%* X
t(X) %*% X
X %*% t(X)
dim(X)
yh = fit$fitted.values
yy = y-yh
SSR =sum(yy**2)
SSR
sigma2 = SSR / 48
X = cbind(rep(1,N), x)
dim(X)
t(X) %*% X
xx = solve((t(X) %*% X))
xx
sigma2 = SSR / 48
xx * sigma2
diag(xx)
diag(xx) * sigma2
sqrt(diag(xx) * sigma2)
day = c("A","B","C")
condition = c("treated","control")
model.matrix(~ day + condition)
model.matrix(~ day)
day = c("A","B","C")
condition = c("treated","control")
model.matrix(~ day + condition)
day
day = factot(c("A","B","C"))
day = factor(c("A","B","C"))
day
condition = factor(c("treated","control"))
model.matrix(~ day + condition)
nx = 5
ny = 7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
t(X) %*% X
rep(c(0,1),c(nx, ny)
)
X
species <- factor(c("A","A","B","B"))
condition <- factor(c("control","treated","control","treated"))
model.matrix(~ species + condition)
mm = model.matrix(~ species + condition)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
boxplot(spider$friction ~ spider$type * spider$leg,
col=c("grey90","grey40"), las=2,
main="Comparison of friction coefficients of different leg pairs ")
spider.sub <- spider[spider$leg == "L1",]
fit <- lm(friction ~ type, data=spider.sub)
summary(fit)
(coefs <- coef(fit))
View(spider.sub)
s <- split(spider.sub$friction, spider.sub$type)
mean(s[["pull"]])
mean(s[["push"]]) - mean(s[["pull"]]
)
X <- model.matrix(~ type, data=spider.sub)
X
colnames(X)
head(X)
tail(X)
library(devtools); install_github("ririzarr/rafalib")
library(rafalib)
imagemat(X, main="Model matrix for linear model with one variable")
stripchart(split(spider.sub$friction, spider.sub$type),
vertical=TRUE, pch=1, method="jitter", las=2, xlim=c(0,3), ylim=c(0,2))
a <- -0.25
lgth <- .1
library(RColorBrewer)
cols <- brewer.pal(3,"Dark2")
abline(h=0)
arrows(1+a,0,1+a,coefs[1],lwd=3,col=cols[1],length=lgth)
abline(h=coefs[1],col=cols[1])
arrows(2+a,coefs[1],2+a,coefs[1]+coefs[2],lwd=3,col=cols[2],length=lgth)
abline(h=coefs[1]+coefs[2],col=cols[2])
legend("right",names(coefs),fill=cols,cex=.75,bg="white")
X <- model.matrix(~ type + leg, data=spider)
colnames(X)
head(X)
imagemat(X, main="Model matrix for linear model with two factors")
levels(spider$type)
levels(spider$type,spider$type)
levels(spider$leg)
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
(coefs <- coef(fitTL))
Y <- spider$friction
X <- model.matrix(~ type + leg, data=spider)
beta <- solve(t(X) %*% X) %*% t(X) %*% Y
beta
t(beta)
coefs
spider$group <- factor(paste0(spider$leg, spider$type))
stripchart(split(spider$friction, spider$group),
vertical=TRUE, pch=1, method="jitter", las=2, xlim=c(0,11), ylim=c(0,2))
cols <- brewer.pal(5,"Dark2")
abline(h=0)
arrows(1+a,0,1+a,coefs[1],lwd=3,col=cols[1],length=lgth)
abline(h=coefs[1],col=cols[1])
arrows(3+a,coefs[1],3+a,coefs[1]+coefs[3],lwd=3,col=cols[3],length=lgth)
arrows(5+a,coefs[1],5+a,coefs[1]+coefs[4],lwd=3,col=cols[4],length=lgth)
arrows(7+a,coefs[1],7+a,coefs[1]+coefs[5],lwd=3,col=cols[5],length=lgth)
arrows(2+a,coefs[1],2+a,coefs[1]+coefs[2],lwd=3,col=cols[2],length=lgth)
segments(3+a,coefs[1]+coefs[3],4+a,coefs[1]+coefs[3],lwd=3,col=cols[3])
arrows(4+a,coefs[1]+coefs[3],4+a,coefs[1]+coefs[3]+coefs[2],lwd=3,col=cols[2],length=lgth)
segments(5+a,coefs[1]+coefs[4],6+a,coefs[1]+coefs[4],lwd=3,col=cols[4])
arrows(6+a,coefs[1]+coefs[4],6+a,coefs[1]+coefs[4]+coefs[2],lwd=3,col=cols[2],length=lgth)
segments(7+a,coefs[1]+coefs[5],8+a,coefs[1]+coefs[5],lwd=3,col=cols[5])
arrows(8+a,coefs[1]+coefs[5],8+a,coefs[1]+coefs[5]+coefs[2],lwd=3,col=cols[2],length=lgth)
legend("right",names(coefs),fill=cols,cex=.75,bg="white")
s <- split(spider$friction, spider$group)
mean(s[["L1pull"]])
coefs[1]
mean(s[["L1push"]])
coefs[1] + coefs[2]
means <- sapply(s, mean)
ns <- sapply(s, length)[c(1,3,5,7)]
(w <- ns/sum(ns))
sum(w * (means[c(2,4,6,8)] - means[c(1,3,5,7)]))
coefs[2]
coefs
library(contrast)
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
L3vsL2
install.packages("contrast")
library(contrast)
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
L3vsL2
install.packages("contrast")
library(contrast)
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
L3vsL2
coefs[4] - coefs[3]
(C <- L3vsL2$X)
C %*% beta
L3vsL2
L3vsL2$X
species <- factor(c("A","A","B","B"))
condition <- factor(c("control","treated","control","treated"))
mm = model.matrix(~ species + condition)
mm
y = rnorm(4)
fit = lm(y ~ species + condition)
contrast(fit, list(species="B",condition="control"), list(species="A",condition="treated"))$X
LvsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
X <- model.matrix(~ type + leg, data=spider)
(Sigma <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X))
C <- matrix(c(0,0,-1,0,1),1,5)
Sigma %*% C
Sigma %*% t(C)
sqrt(C %*% Sigma %*% t(C))
sqrt(Sigma[5,5]-Sigma[3,3])
Sigma[5,3]
Sigma[3,3]
Sigma[5,5]
sqrt(abs(Sigma[5,5]-Sigma[3,3]))
sqrt(abs(Sigma[5,5]+Sigma[3,3]-2*Sigma[5,3]))
sqrt(C %*% Sigma %*% t(C))
spider$log2friction <- log2(spider$friction)`
boxplot(log2friction ~ type*leg, data=spider)
boxplot(log2friction ~ type*leg, data=spider)
boxplot(log2friction ~ type*leg, data=spider)
spider$log2friction <- log2(spider$friction)`
spider$log2friction <- log2(spider$friction)
spider$log2friction <- log2(spider$friction)
boxplot(log2friction ~ type*leg, data=spider)
lfit = lm(log2friction ~ type + leg, data=spider)
lfit
summary(lfit)
library(contrast)
L2vsL1 = contrast(lfit,list(leg="L2",type="pull"),list(leg="L1",type="pull"))
L2vsL1
L2vsL1 = contrast(lfit,list(leg="L2",type="push"),list(leg="L1",type="push"))
L2vsL1
contrast(lfit,list(type="push"),list(leg="L4"))
summary(lfit)
lfiti = lm(log2friction ~ type + leg + type:leg, data=spider)
summary(lfiti)
anova(lfiti)
summary(lfiti)
lfiti$coefficients
lfiti$coefficients[3]
lfiti$coefficients[3]-lfiti$coefficients[6]
L2vsL1 = contrast(lfit,list(leg="L2",type="push"),list(leg="L1",type="push"))
L2vsL1$X
fit = lm(y ~ species + condition)
contrast(fit, list(species="B",condition="control"), list(species="A",condition="treated"))$X
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
L2vsL1 = contrast(fiti,list(leg="L2",type="push"),list(leg="L1",type="push"))
L2vsL1
summary(fitX)
fitX <- lm(friction ~ type + leg + type:leg, data=spider)
summary(fitX)
coefs <- coef(fitX)
L2push.vs.pull <- contrast(fitX,
list(leg="L2", type = "push"),
list(leg="L2", type = "pull"))
L2push.vs.pull
library(multcomp)
C <- matrix(c(0,0,0,0,0,-1,1,0), 1)
L3vsL2interaction <- glht(fitX, linfct=C)
summary(fitX)
summary(L3vsL2interaction)
coefs[7] - coefs[6]
```
C <- matrix(c(0,0,0,0,0,-1,1,0), 1)
L3vsL2interaction <- glht(fitX, linfct=C)
summary(fitX)
summary(L3vsL2interaction)
coefs[7] - coefs[6]
lfiti$coefficients
lfiti$coefficients[3] - lfiti$coefficients[6]
m = matrix(c(1,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1),4,4)
qr(m)$rank
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix( ~ sex + trt)
qr(X)$rank
X
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
fitTheRest(1,2)
X
fitTheRest(1,2)
outer(1:3,1:3,`*`)
outer(-2:8,-2:8,Vectorize(fitTheRest))
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
fitTheRest(1,2)
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
fitTheRest(1,2)
fit <- lm(friction ~ type + leg, data=spider)
betahat <- coef(fit)
Y <- matrix(spider$friction, ncol=1)
X <- model.matrix(~ type + leg, data=spider)
QR <- qr(X)
Q <- qr.Q( QR )
R <- qr.R( QR )
Q[1,1]
```{r, echo=TRUE}
R[1,1]
R_beta = t(Q) %*% Y
R_beta[1,1]
exp(-1)
exp(-1) - exp(0.5)
exp(-4)- exxp(2)
exp(-4)- exp(-2)
exp(-4)+ exp(-2)
pnorm(0)
pnorm(1)
pnorm(5.2)
pnorm(2.8)
1-pnorm(2.8)
pnorm(2.2)
?pnorm
pnrm*5.2, mean =4,sd=3)
pnorm(5.2, mean =4,sd=3)
1-pnorm(2.8, mean =4,sd=3)
pnorm(2.2, mean =4,sd=3)
### 12/15/2014
### Bruce Cottman
###
###
rm(list = ls(all = TRUE)) #CLEAR WORKSPACE
#
invisible(library(XLConnect))
#install.packages("xlsx")
invisible(require(xlsx))
invisible(require(stringr))
#install.packages("dplyr")
#invisible(require(dplyr))
invisible(require(ggplot2))
#install.packages("lubridate")
invisible(require(lubridate))
#install.packages("bitops")
#invisible(require(bitops))
#invisible(require(RCurl))
#install.packages("scales")
#invisible(require(scales))
#install.packages("ggthemes")
#invisible(library(ggthemes))
```
```{r, echo=FALSE}
#
### graphs theme functions
#theme
theme_slanted_axis = function(){
theme(plot.title=element_text(size=12,face="bold", vjust=2)) +
theme(axis.text.x = element_text(angle = 50, vjust=1.0, hjust = 1,face="bold",colour = "black")) +
theme(axis.text.y = element_text(face="bold",colour = "black")) +
theme(axis.text=element_text(size=10),axis.title=element_text(size=10,face="bold"))
}
# DB are usually binary and internal use
readDB <- function(wd,fname){
setwd(wd)
cat("Loading database file: ",fname,"\n")
readRDS(fname)
}
#set target city
TargetCity  = toupper("gainesville")
DateToday ="28033015"
fn = paste0("DB.Alachua.APCA.",DateToday,".rds")
ACPARecords = readDB("~/Documents/Real.Estate/input/DB/",fn)
ACPARecords = ACPARecords[ACPARecords$paddr != "" ,]
ACPARecords = unique(ACPARecords)
#table(ACPARecords$PUse)
# focus on homes, filter out land, vacancies, etc.
pull = c("SINGLE FAMILY",
"MULTIFAMILY",
"MISC. RESIDENCE",
"MOBILE HOME",
"CONDOMINIUM"
)
ACPARecords = unique(subset(ACPARecords,ACPARecords$PUse %in% pull ))
cat("Loaded ACPA Records:",nrow(ACPARecords),"\n")
#
# Listings of CITIES OF Alachua county
readListingDB <- function(wdf,fname,wdl){
setwd(wdf)
CityList = readWorksheetFromFile(fname)
CityList = CityList[complete.cases(CityList),]
# Read in  listings
Start =1
End = nrow(CityList)
seqi = as.numeric(seq(Start,End))
# ii=seqi[Stat]
INITFLAG = 0
for(ii in seqi){
if(CityList$FILENAME[ii] != "NONE"){
setwd(wdl)
prop=readRDS(CityList$FILENAME[ii])
# INITIALZE
if(INITFLAG == 0){
TCityListings = subset(prop,prop$street %in% "0xxxxxyyyzzz")
INITFLAG = 1
}
cat("Number of Listing Records:",nrow(prop)," for City: ",CityList$CITY[ii],"\n")
# add to total
TCityListings = rbind(TCityListings,prop)
} # END IF
} #END FOR LOOP
cat("Total Number of Listing Records:",nrow(TCityListings),"\n")
TCityListings = unique(TCityListings)
cat("Total Number of UNIQUE Listing Records:",nrow(TCityListings),"\n")
TCityListings
}
TCityListings = readListingDB("~/Dropbox/Public/Real.Estate/code",
"AlachuaCountyCityListingsList.xlsx",
"~/Documents/Real.Estate/input/DB/")
cat("Loaded Listings DB:",nrow(TCityListings),"\n")
invisible(library(XLConnect))
readListingDB <- function(wdf,fname,wdl){
setwd(wdf)
CityList = readWorksheetFromFile(fname)
CityList = CityList[complete.cases(CityList),]
# Read in  listings
Start =1
End = nrow(CityList)
seqi = as.numeric(seq(Start,End))
# ii=seqi[Stat]
INITFLAG = 0
for(ii in seqi){
if(CityList$FILENAME[ii] != "NONE"){
setwd(wdl)
prop=readRDS(CityList$FILENAME[ii])
# INITIALZE
if(INITFLAG == 0){
TCityListings = subset(prop,prop$street %in% "0xxxxxyyyzzz")
INITFLAG = 1
}
cat("Number of Listing Records:",nrow(prop)," for City: ",CityList$CITY[ii],"\n")
# add to total
TCityListings = rbind(TCityListings,prop)
} # END IF
} #END FOR LOOP
cat("Total Number of Listing Records:",nrow(TCityListings),"\n")
TCityListings = unique(TCityListings)
cat("Total Number of UNIQUE Listing Records:",nrow(TCityListings),"\n")
TCityListings
}
TCityListings = readListingDB("~/Dropbox/Public/Real.Estate/code",
"AlachuaCountyCityListingsList.xlsx",
"~/Documents/Real.Estate/input/DB/")
cat("Loaded Listings DB:",nrow(TCityListings),"\n")
```
